/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.greenlab.view;

import com.greenlab.controller.CustomerController;
import com.greenlab.controller.InvoiceController;
import com.greenlab.controller.OrderDetailsController;
import com.greenlab.controller.ProductController;
import com.greenlab.controller.QuotationController;
import com.greenlab.controller.QuotationDetailsController;
import com.greenlab.controller.ServiceController;
import com.greenlab.model.Customer;
import com.greenlab.model.Invoice;
import com.greenlab.model.InvoiceItem;
import com.greenlab.model.OrderDetails;
import com.greenlab.model.Product;
import com.greenlab.model.Quotation;
import com.greenlab.model.QuotationDetails;
import com.greenlab.model.Service;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author zeonit
 */
public class PointOfSale extends javax.swing.JPanel {

    CustomerController customerController;
    InvoiceController invoiceController;
    OrderDetailsController orderDetailsController;
    static QuotationDetailsController quotationDetailsController = new QuotationDetailsController();
    static QuotationController quotationController;
    ProductController productController;
    ServiceController serviceController;
    ArrayList<OrderDetails> detailsList;
    ArrayList<QuotationDetails> quotaionList;
    static DefaultTableModel dtm;
    private static DecimalFormat df2 = new DecimalFormat("#.##");
    ArrayList<InvoiceItem> invoiceItems;
    Date d = new Date();
    int qId;

    /**
     * Creates new form PointOfSale
     */
    public PointOfSale() {
        initComponents();
        loadCustomers();
        AutoCompleteDecorator.decorate(customerCombo);
        AutoCompleteDecorator.decorate(itemCombo);
        getLastRow();

        txtTotalDiscout.setText("0");
        qtytext.setText("0");
//        txtInvoiceI.setEditable(false);
        chkService.setVisible(false);
        chkProduct.setSelected(true);
        chkProduct.setVisible(false);
        loadItem();
        datePicker.setDate(d);
        itemTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        itemTable.getColumnModel().getColumn(0).setWidth(0);
        itemTable.getColumnModel().getColumn(0).setMinWidth(0);
        itemTable.getColumnModel().getColumn(0).setMaxWidth(0);
        jButton3.setVisible(false);

    }

    PointOfSale(int id) {
        initComponents();
        System.out.println("New Open");
        quatationLoadToInvoice(id);
        txtNetTotal.setText(id + "");
        jButton3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qtytext = new javax.swing.JTextField();
        discounttext = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbelHeder = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lbel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        txtTotalDiscout = new javax.swing.JTextField();
        txtNetTotal = new javax.swing.JTextField();
        datePicker = new com.toedter.calendar.JDateChooser();
        itemCombo = new javax.swing.JComboBox<>();
        chkProduct = new javax.swing.JCheckBox();
        chkService = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        customerCombo = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        txtName = new javax.swing.JLabel();
        txtAddress = new javax.swing.JLabel();
        txtContact = new javax.swing.JLabel();
        txtInvoiceId = new javax.swing.JLabel();
        cmbSelect = new javax.swing.JComboBox<>();
        labelLoadQuotation = new javax.swing.JLabel();

        qtytext.setText("jTextField15");
        qtytext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtytextActionPerformed(evt);
            }
        });
        qtytext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtytextKeyReleased(evt);
            }
        });

        discounttext.setText("jTextField15");
        discounttext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discounttextActionPerformed(evt);
            }
        });
        discounttext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discounttextKeyReleased(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Customer   :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 70, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Name          :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 70, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Address      :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 70, 20));

        lbelHeder.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbelHeder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbelHeder.setText("Invoice");
        jPanel1.add(lbelHeder, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 190, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Contact       :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 70, 20));

        jButton1.setBackground(new java.awt.Color(51, 102, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 70, 25));

        lbel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbel1.setText("Invoice Id    :");
        jPanel1.add(lbel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 80, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Date              :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 80, 20));

        itemTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Description", "Item Price", "Qty", "Discount Per Item", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setRowHeight(22);
        jScrollPane1.setViewportView(itemTable);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            itemTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            itemTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(qtytext));
            itemTable.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(discounttext));
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 1010, 330));

        btnAdd.setBackground(new java.awt.Color(51, 102, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 120, 25));

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jButton3.setText("View");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 120, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel12.setText("Net total    :");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 540, 70, 20));

        jLabel14.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel14.setText("Total        :");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, 60, 20));

        jLabel15.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel15.setText("Total  Discount     :");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 540, 120, 20));

        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });
        jPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 540, 100, -1));

        txtTotalDiscout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalDiscoutActionPerformed(evt);
            }
        });
        jPanel1.add(txtTotalDiscout, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 540, 100, -1));

        txtNetTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNetTotalActionPerformed(evt);
            }
        });
        jPanel1.add(txtNetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 540, 100, -1));
        jPanel1.add(datePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 160, 20));

        itemCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboActionPerformed(evt);
            }
        });
        jPanel1.add(itemCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 100, -1));

        chkProduct.setText("Product");
        chkProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkProductActionPerformed(evt);
            }
        });
        jPanel1.add(chkProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, -1, -1));

        chkService.setText("Service");
        chkService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkServiceActionPerformed(evt);
            }
        });
        jPanel1.add(chkService, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 160, 70, -1));

        jButton4.setBackground(new java.awt.Color(51, 102, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Remove Line");
        jButton4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 160, 120, 25));

        customerCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customerComboItemStateChanged(evt);
            }
        });
        customerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboActionPerformed(evt);
            }
        });
        jPanel1.add(customerCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 180, 30));

        jButton2.setBackground(new java.awt.Color(51, 102, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("load");
        jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 60, 25));

        jButton5.setBackground(new java.awt.Color(51, 102, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Print");
        jButton5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 540, 120, 30));
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 250, 20));
        jPanel1.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 250, 20));
        jPanel1.add(txtContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 250, 20));
        jPanel1.add(txtInvoiceId, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 160, 20));

        cmbSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Invoice", "Quotation" }));
        cmbSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectActionPerformed(evt);
            }
        });
        jPanel1.add(cmbSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 140, 20));

        labelLoadQuotation.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        labelLoadQuotation.setForeground(new java.awt.Color(0, 51, 255));
        labelLoadQuotation.setText("Load from quotations");
        labelLoadQuotation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelLoadQuotation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLoadQuotationMouseClicked(evt);
            }
        });
        jPanel1.add(labelLoadQuotation, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 110, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1056, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalDiscoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalDiscoutActionPerformed
        double amountTotal = Double.parseDouble(txtTotal.getText());
        if (txtTotal.getText() != null) {
            double discount = Double.parseDouble(txtTotalDiscout.getText());
            //double disAvg = discount;
            double totAmount = amountTotal - discount;
            txtNetTotal.setText(String.format("%.2f", (totAmount)));

        }
    }//GEN-LAST:event_txtTotalDiscoutActionPerformed

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        //qtytext.requestFocus();

    }//GEN-LAST:event_btnAddMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NewJFrame njf = new NewJFrame();
        njf.setLocationRelativeTo(null);
        njf.setVisible(true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean isAdded = false;
        //        int cusId=Integer.parseInt(txtSearchCustomer.getText());
        SimpleDateFormat dt = new SimpleDateFormat("yyyyy-mm-dd hh:mm:ss");
        invoiceItems = new ArrayList<>();
        customerController = new CustomerController();
        invoiceController = new InvoiceController();
        String name = txtName.getText();
        String address = txtAddress.getText();
        String contact = txtContact.getText();
        //String refference=txtRefference.getText();
        String invoiceId = txtInvoiceId.getText();
        Date date = datePicker.getDate();
        detailsList = new ArrayList<>();
        Double total = Double.parseDouble(txtTotal.getText());
        Double discountAmount = Double.parseDouble(txtTotalDiscout.getText());
        Double netTotal = Double.parseDouble(txtNetTotal.getText());
        Customer customer = customerController.searchByName(name);
        for (int i = 0; i < itemTable.getRowCount(); i++) {
            OrderDetails orderDetails = new OrderDetails(Integer.parseInt(invoiceId), Integer.parseInt(itemTable.getValueAt(i, 0).toString()), itemTable.getValueAt(i, 1).toString(), Double.parseDouble(itemTable.getValueAt(i, 2).toString()), (int) Double.parseDouble(itemTable.getValueAt(i, 3).toString()), Double.parseDouble(itemTable.getValueAt(i, 4).toString()), Double.parseDouble(itemTable.getValueAt(i, 5).toString()));
            detailsList.add(orderDetails);
        }
        for (int i = 0; i < itemTable.getRowCount(); i++) {
            String item = itemTable.getValueAt(i, 1).toString();
            double qty = Double.parseDouble(itemTable.getValueAt(i, 3).toString());
            double discount = Double.parseDouble(itemTable.getValueAt(i, 4).toString());
            double amount = Double.parseDouble(itemTable.getValueAt(i, 5).toString());
            InvoiceItem invoiceItem = new InvoiceItem(item, qty, discount, amount);
            invoiceItems.add(invoiceItem);
        }
        //Invoice invoice = new Invoice(date, total, discountAmount, netTotal, detailsList, customer);
        //isAdded = invoiceController.addInvoice(invoice);
        if (true) {
            try {
                String select = cmbSelect.getSelectedItem().toString();
                if (select == "Invoice") {
                    printInvoice(invoiceId, date, invoiceItems, total, discountAmount, netTotal);

                } else {
                    printInvoice(invoiceId, date, invoiceItems, total, discountAmount, netTotal);
                }

            } catch (JRException ex) {
                Logger.getLogger(PointOfSale.class.getName()).log(Level.SEVERE, null, ex);
            }
            getLastRow();
            //JOptionPane.showMessageDialog(this, "invoice added...");
            //clearAll();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        dtm = (DefaultTableModel) itemTable.getModel();
        productController = new ProductController();
        serviceController = new ServiceController();
//      dtm.setRowCount(0);
        String item = (String) itemCombo.getSelectedItem();
        Product product = productController.searchByName(item);
        Service service = (Service) serviceController.searchByName(item);
        if (chkProduct.isSelected()) {

            Object[] rowData = {product.getProduct_id(), product.getDescription(), product.getSellingPrice(), 0, 0, 0};
            dtm.addRow(rowData);
        }
        if (chkService.isSelected()) {

            Object[] rowData = {service.getId(), service.getService(), service.getPrice(), 0, 0, 0};
            dtm.addRow(rowData);
        }
        
        
        
        //qtytext.transferFocus();
    }//GEN-LAST:event_btnAddActionPerformed

    private void chkProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkProductActionPerformed
        productController = new ProductController();
        List<Product> products = productController.getAllProduct();
        chkService.setSelected(false);
        if (products != null) {
            itemCombo.removeAllItems();
            for (Product product : products) {
                itemCombo.addItem(product.getDescription());
            }
        }
    }//GEN-LAST:event_chkProductActionPerformed

    private void chkServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkServiceActionPerformed
        serviceController = new ServiceController();
        List<Service> services = serviceController.getAllServices();
        chkProduct.setSelected(false);
        if (services != null) {
            itemCombo.removeAllItems();
            for (Service service : services) {
                itemCombo.addItem(service.getService());
            }
        }
    }//GEN-LAST:event_chkServiceActionPerformed

    private void itemComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboActionPerformed

    }//GEN-LAST:event_itemComboActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        dtm = (DefaultTableModel) itemTable.getModel();
        int row = itemTable.getSelectedRow();
        dtm.removeRow(row);
        getTotAmount();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void qtytextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtytextActionPerformed
        dtm = (DefaultTableModel) itemTable.getModel();
        double qty = Double.parseDouble(qtytext.getText());
        double price = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 2).toString());
        double total = (price) * (qty);
        itemTable.setValueAt(total, itemTable.getSelectedRow(), 5);
        itemTable.setValueAt(qty, itemTable.getSelectedRow(), 3);

        getTotAmount();
    }//GEN-LAST:event_qtytextActionPerformed

    private void discounttextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discounttextActionPerformed

        if (itemTable.getValueAt(itemTable.getSelectedRow(), 5) != null) {
            double itemPrice = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 2).toString());
            double qty = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 3).toString());
            double amountTotal = itemPrice * qty;
            double nowTotal = Double.parseDouble(txtTotal.getText());
            if (discounttext.getText() != null) {
                double discount = Double.parseDouble(discounttext.getText()) * qty;
                
                double totAmount = amountTotal - discount;

                itemTable.setValueAt(totAmount, itemTable.getSelectedRow(), 5);
                
                double tot = 0;

                for (int i = 0; i < itemTable.getRowCount(); i++) {

                    double amount = Double.parseDouble(itemTable.getValueAt(i, 5).toString());
                    tot += amount;

                    txtTotal.setText(String.format("%.2f", (tot)));
                    txtNetTotal.setText(String.format("%.2f", (tot)));
                }
            }
        }
    }//GEN-LAST:event_discounttextActionPerformed

    private void customerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboActionPerformed

        //txtId.setText((String.valueOf(c.getId())));

    }//GEN-LAST:event_customerComboActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadCustomers();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void customerComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customerComboItemStateChanged

        if (customerCombo.getSelectedItem() != null) {
            customerController = new CustomerController();
            String name = customerCombo.getSelectedItem().toString();
            Customer c = customerController.searchByName(name);
            txtName.setText(c.getName());
            txtAddress.setText(c.getAddress());
            txtContact.setText(c.getTelphone1());
        }


    }//GEN-LAST:event_customerComboItemStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (itemTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please add the item or more.");
            return;
        }
        if (qtytext.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantity is empty.");
            return;
        }
        if (Double.parseDouble(qtytext.getText()) < 1) {
            JOptionPane.showMessageDialog(this, "Quantity is 0.Quantity must one or more.");
            return;
        }

        int inovoiceId = Integer.parseInt(txtInvoiceId.getText());
        customerController = new CustomerController();
        Customer customer1 = new Customer();
        customer1 = customerController.searchByName(txtName.getText());
        int cusid = customer1.getId();
        double netTot = Double.parseDouble(txtNetTotal.getText());
        boolean isAdded = false;
        //        int cusId=Integer.parseInt(txtSearchCustomer.getText());
        SimpleDateFormat dt = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
        invoiceItems = new ArrayList<>();
        customerController = new CustomerController();
        invoiceController = new InvoiceController();
        quotationController = new QuotationController();
        String name = txtName.getText();
        String address = txtAddress.getText();
        String contact = txtContact.getText();
        //String refference=txtRefference.getText();
        String invoiceId = txtInvoiceId.getText();
        Date date = datePicker.getDate();
        detailsList = new ArrayList<>();
        quotaionList = new ArrayList<>();
        Double total = Double.parseDouble(txtTotal.getText());
        Double discountAmount = Double.parseDouble(txtTotalDiscout.getText());
        Double netTotal = Double.parseDouble(txtNetTotal.getText());
        Customer customer = customerController.searchByName(name);
        for (int i = 0; i < itemTable.getRowCount(); i++) {
            OrderDetails orderDetails = new OrderDetails(Integer.parseInt(invoiceId), Integer.parseInt(itemTable.getValueAt(i, 0).toString()), itemTable.getValueAt(i, 1).toString(), Double.parseDouble(itemTable.getValueAt(i, 2).toString()), (int) Double.parseDouble(itemTable.getValueAt(i, 3).toString()), Double.parseDouble(itemTable.getValueAt(i, 4).toString()), Double.parseDouble(itemTable.getValueAt(i, 5).toString()));
            detailsList.add(orderDetails);
        }
        for (int i = 0; i < itemTable.getRowCount(); i++) {
            String item = itemTable.getValueAt(i, 1).toString();
            double qty = Double.parseDouble(itemTable.getValueAt(i, 3).toString());
            double discount = Double.parseDouble(itemTable.getValueAt(i, 4).toString());
            double amount = Double.parseDouble(itemTable.getValueAt(i, 5).toString());
            InvoiceItem invoiceItem = new InvoiceItem(item, qty, discount, amount);
            invoiceItems.add(invoiceItem);
        }
        String select = cmbSelect.getSelectedItem().toString();
        if (select == "Invoice") {
            Invoice invoice = new Invoice(date, total, discountAmount, netTotal, detailsList, customer);
            isAdded = invoiceController.addInvoice(invoice);

        }
        if (select == "Quotation") {
            for (int i = 0; i < itemTable.getRowCount(); i++) {
                QuotationDetails quotationDetails = new QuotationDetails(Integer.parseInt(invoiceId), Integer.parseInt(itemTable.getValueAt(i, 0).toString()), itemTable.getValueAt(i, 1).toString(), Double.parseDouble(itemTable.getValueAt(i, 2).toString()), (int) Double.parseDouble(itemTable.getValueAt(i, 3).toString()), Double.parseDouble(itemTable.getValueAt(i, 4).toString()), Double.parseDouble(itemTable.getValueAt(i, 5).toString()));
                quotaionList.add(quotationDetails);
            }

            Quotation quotation = new Quotation(date, total, discountAmount, netTotal, quotaionList, customer);
            isAdded = quotationController.addQuotation(quotation);

        } else {

        }

        if (isAdded) {
            try {

                if (select == "Quotation") {
                    printQuotation(invoiceId, date, invoiceItems, total, discountAmount, netTotal, true);

                } else {
                    printInvoice(invoiceId, date, invoiceItems, total, discountAmount, netTotal, true);
                }

            } catch (JRException ex) {
                Logger.getLogger(PointOfSale.class.getName()).log(Level.SEVERE, null, ex);
            }
            //getLastRow();
            getQuotationlast();

            //JOptionPane.showMessageDialog(this, "invoice added...");
            clearAll();
        }
        if (select == "Invoice") {
            PaynowForm paynowForm = new PaynowForm(inovoiceId, cusid, netTot, date);
            paynowForm.setLocationRelativeTo(null);
            paynowForm.setVisible(true);
            getLastRow();

        }

        this.revalidate();
        this.repaint();

        //printInvoice(inovoiceId, date, invoiceItems, total, discountAmount, netTotal);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void cmbSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectActionPerformed
        String select = cmbSelect.getSelectedItem().toString();
        if (select == "Invoice") {
            lbelHeder.setText("Invoice");
            lbel1.setText("Invoice No");
            getLastRow();
            labelLoadQuotation.setVisible(true);
            chkProduct.setSelected(true);

        }
        if (select == "Quotation") {
            lbelHeder.setText("Quotation");
            lbel1.setText("Quotation No");
            getQuotationlast();
            labelLoadQuotation.setVisible(false);
            chkProduct.setSelected(true);
        } else {

        }
    }//GEN-LAST:event_cmbSelectActionPerformed

    private void labelLoadQuotationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLoadQuotationMouseClicked
        Quotations quotations = new Quotations();
        quotations.setVisible(true);
    }//GEN-LAST:event_labelLoadQuotationMouseClicked

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtNetTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNetTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNetTotalActionPerformed

    private void qtytextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtytextKeyReleased
        /////////////////
        dtm = (DefaultTableModel) itemTable.getModel();
        double qty = Double.parseDouble(qtytext.getText());
        double price = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 2).toString());
        double total = (price) * (qty);
        itemTable.setValueAt(total, itemTable.getSelectedRow(), 5);
        itemTable.setValueAt(qty, itemTable.getSelectedRow(), 3);

        getTotAmount();
    }//GEN-LAST:event_qtytextKeyReleased

    private void discounttextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discounttextKeyReleased
        if (itemTable.getValueAt(itemTable.getSelectedRow(), 5) != null) {
            double itemPrice = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 2).toString());
            double qty = Double.parseDouble(itemTable.getValueAt(itemTable.getSelectedRow(), 3).toString());
            double amountTotal = itemPrice * qty;
            double nowTotal = Double.parseDouble(txtTotal.getText());
            if (discounttext.getText() != null) {
                double discount = Double.parseDouble(discounttext.getText()) * qty;
                
                double totAmount = amountTotal - discount;

                itemTable.setValueAt(totAmount, itemTable.getSelectedRow(), 5);
                
                double tot = 0;

                for (int i = 0; i < itemTable.getRowCount(); i++) {

                    double amount = Double.parseDouble(itemTable.getValueAt(i, 5).toString());
                    tot += amount;

                    txtTotal.setText(String.format("%.2f", (tot)));
                    txtNetTotal.setText(String.format("%.2f", (tot)));
                }
            }
        }
    }//GEN-LAST:event_discounttextKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JCheckBox chkProduct;
    private javax.swing.JCheckBox chkService;
    private javax.swing.JComboBox<String> cmbSelect;
    private static javax.swing.JComboBox<String> customerCombo;
    private com.toedter.calendar.JDateChooser datePicker;
    private javax.swing.JTextField discounttext;
    private javax.swing.JComboBox<String> itemCombo;
    static javax.swing.JTable itemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelLoadQuotation;
    private javax.swing.JLabel lbel1;
    private javax.swing.JLabel lbelHeder;
    private javax.swing.JTextField qtytext;
    private static javax.swing.JLabel txtAddress;
    private static javax.swing.JLabel txtContact;
    private javax.swing.JLabel txtInvoiceId;
    private static javax.swing.JLabel txtName;
    private static javax.swing.JTextField txtNetTotal;
    private static javax.swing.JTextField txtTotal;
    private static javax.swing.JTextField txtTotalDiscout;
    // End of variables declaration//GEN-END:variables

    private void getTotAmount() {
        double totAmount = 0;
        if (itemTable.getRowCount() != 0) {
            for (int i = 0; i < itemTable.getRowCount(); i++) {
                double amount = Double.parseDouble(itemTable.getValueAt(i, 5).toString());
                totAmount += amount;
            }
            txtTotal.setText(String.valueOf(totAmount));
            txtNetTotal.setText(String.valueOf(totAmount));
        }
    }

    public void loadCustomers() {
        customerController = new CustomerController();
        List<Customer> customer = customerController.getAllCustomer();
        chkProduct.setSelected(false);
        if (customer != null) {
            customerCombo.removeAllItems();
            for (Customer customer1 : customer) {
                customerCombo.addItem(customer1.getName());
            }
        }
    }

    private void getLastRow() {
        invoiceController = new InvoiceController();
        Invoice invoice = invoiceController.getLastInvoice();
        if (invoice != null) {
            //String[] parts = invoice.getInvoiceCompanyId().split("I");
            int id = invoice.getId();
            String newId = String.valueOf(id + 1);
            System.out.println(newId);
            txtInvoiceId.setText(newId);
        } else {
            txtInvoiceId.setText("1");
        }
    }

    private void getQuotationlast() {
        quotationController = new QuotationController();
        Quotation quotation = quotationController.getLastQuotation();
        if (quotation != null) {
            int id = quotation.getId();
            String newId = String.valueOf(id + 1);
            txtInvoiceId.setText(newId);
        } else {
            txtInvoiceId.setText("1");
        }
    }

    private void clearAll() {
        txtNetTotal.setText("");
        txtTotalDiscout.setText("0");
        //txtId.setText("");
        txtTotal.setText("");
        //txtRefference.setText("");
        dtm = (DefaultTableModel) itemTable.getModel();
        dtm.getDataVector().removeAllElements();
        chkProduct.setSelected(true);

    }

    private void printInvoice(String invoiceId, Date date, ArrayList<InvoiceItem> invoiceItems, Double total, Double discountAmount, Double netTotal) throws JRException {
        InputStream is;
        if (cmbSelect.getSelectedItem() == "Quotation") {
            is = getClass().getResourceAsStream("quotation.jrxml");
        } else {
            is = getClass().getResourceAsStream("billinvoice.jrxml");
        }

        JasperReport jr = JasperCompileManager.compileReport(is);
        HashMap<String, Object> hm = new HashMap<String, Object>();
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(invoiceItems);
        hm.put("parameter1", invoiceId);
        hm.put("parameter2", date);
        hm.put("parameter3", total);
        hm.put("parameter4", discountAmount);
        hm.put("parameter5", netTotal);

        JasperPrint jp = JasperFillManager.fillReport(jr, hm, beanCollectionDataSource);
        JasperViewer.viewReport(jp, false);

    }

    private void printInvoice(String invoiceId, Date date, ArrayList<InvoiceItem> invoiceItems, Double total, Double discountAmount, Double netTotal, boolean b) throws JRException {

        InputStream is = getClass().getResourceAsStream("billinvoice.jrxml");
        JasperReport jr = JasperCompileManager.compileReport(is);
        HashMap<String, Object> hm = new HashMap<String, Object>();
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(invoiceItems);
        hm.put("parameter1", invoiceId);
        hm.put("parameter2", date);
        hm.put("parameter3", total);
        hm.put("parameter4", discountAmount);
        hm.put("parameter5", netTotal);

        JasperPrint jp = JasperFillManager.fillReport(jr, hm, beanCollectionDataSource);
        //JasperViewer.viewReport(jp, false);
        JasperPrintManager.printReport(jp, false);
    }

    private void loadItem() {
        productController = new ProductController();
        List<Product> products = productController.getAllProduct();
        chkService.setSelected(false);
        if (products != null) {
            itemCombo.removeAllItems();
            for (Product product : products) {
                itemCombo.addItem(product.getDescription());
            }
        }
    }

    private void printQuotation(String invoiceId, Date date, ArrayList<InvoiceItem> invoiceItems, Double total, Double discountAmount, Double netTotal, boolean b) throws JRException {
        InputStream is = getClass().getResourceAsStream("quotation.jrxml");
        JasperReport jr = JasperCompileManager.compileReport(is);
        HashMap<String, Object> hm = new HashMap<String, Object>();
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(invoiceItems);
        hm.put("parameter1", invoiceId);
        hm.put("parameter2", date);
        hm.put("parameter3", total);
        hm.put("parameter4", discountAmount);
        hm.put("parameter5", netTotal);

        JasperPrint jp = JasperFillManager.fillReport(jr, hm, beanCollectionDataSource);
        //JasperViewer.viewReport(jp, false);
        JasperPrintManager.printReport(jp, false);
    }

    public static void quatationLoadToInvoice(int id) {
        quotationController = new QuotationController();
        dtm = (DefaultTableModel) itemTable.getModel();

        Quotation quotation = quotationController.searchQuotation(id);
        txtName.setText(quotation.getCustomer().getName());
        txtAddress.setText(quotation.getCustomer().getAddress());
        txtContact.setText(quotation.getCustomer().getTelphone1());
        txtTotal.setText(String.valueOf(quotation.getTotal()));
        txtNetTotal.setText(String.valueOf(quotation.getNetTotal()));
        txtTotalDiscout.setText(String.valueOf(quotation.getTotalDiscount()));
        customerCombo.setSelectedItem(quotation.getCustomer().getName());
        ArrayList<QuotationDetails> quotationDetailslist = new ArrayList<>();
        quotationDetailslist = (ArrayList<QuotationDetails>) quotationDetailsController.searchByQuotations(id);
        dtm.setRowCount(0);
        for (QuotationDetails quotationDetails : quotationDetailslist) {
            Object[] rowData = {quotationDetails.getProduct_id(), quotationDetails.getDescription(), quotationDetails.getItem_price(), quotationDetails.getQty(), quotationDetails.getItemDiscount(), quotationDetails.getAmount()};
            dtm.addRow(rowData);
        }

    }
}
